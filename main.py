# Импортируйте необходимые модули
import datetime as dt
import math

FORMAT = '%d.%m.%Y'  # Запишите формат полученного времени.
WEIGHT = 75  # Вес.
HEIGHT = 175  # Рост.
K_1 = 0.035  # Коэффициент для подсчета калорий.
K_2 = 0.029  # Коэффициент для подсчета калорий.
STEP_M = 0.65  # Длина шага в метрах.

transfer_coeff = 1000 # Коэффициент перевода значения расстояния из метров в километры
dist = (steps * STEP_M) / transfer_coeff  # Напишите формулу расчёта

mean_speed = dist / hours
minutes = hours * 60

storage_data = {}  # Словарь для хранения полученных данных.


def check_correct_data(data):
    """Проверка корректности полученного пакета."""
    # Если длина пакета отлична от 2
    # или один из элементов пакета имеет пустое значение -
    # функция вернет False, иначе - True.




def check_correct_time(time):
    """Проверка корректности параметра времени."""
    # Если словарь для хранения не пустой
    # и значение времени, полученное в аргументе,
    # меньше или равно самому большому значению ключа в словаре,
    # функция вернет False.
    # Иначе - True


def get_step_day(steps):
    """Получить количество пройденных шагов за этот день."""
    # Посчитайте все шаги, записанные в словарь storage_data,
    # прибавьте к ним значение из последнего пакета
    # и верните эту сумму.


def get_distance(steps):
    """Получить дистанцию пройденного пути в км."""
    # Посчитайте дистанцию в километрах,
    # исходя из количества шагов и длины шага.

    dist = (steps * STEP_M) / transfer_coeff  # Напишите формулу расчёта
    return dist

def get_spent_calories(dist, current_time):
    """Получить значения потраченных калорий."""
    # В уроке «Последовательности» вы написали формулу расчета калорий.
    # Перенесите её сюда и верните результат расчётов.
    # Для расчётов вам потребуется значение времени;
    # получите его из объекта current_time;
    # переведите часы и минуты в часы, в значение типа float.

    date_object = dt.datetime.strptime(day, FORMAT).date()
    current_time = dt.datetime.now()
    spent_calories = (0.035 * WEIGHT + (mean_speed ** 2 / HEIGHT) * 0.029 * WEIGHT) * minutes
    return spent_calories


def get_achievement(dist):
    """Получить поздравления за пройденную дистанцию."""
    # В уроке «Строки» вы описали логику
    # вывода сообщений о достижении в зависимости
    # от пройденной дистанции.
    # Перенесите этот код сюда и замените print() на return.

    if dist >= 6.5:
        achievement = 'Отличный результат! Цель достигнута.'
    elif dist >= 3.9:
        achievement = 'Неплохо! День был продуктивным.'
    elif dist >= 2:
        achievement = 'Маловато, но завтра наверстаем!'
    else:
        achievement = 'Лежать тоже полезно. Главное — участие, а не победа!'

    output = (f'''
    Сегодня вы прошли {steps} шагов.
    Пройденная дистанция {dist:.2f} км.
    Вы сожгли {spent_calories:.2f} ккал.
    {achievement}''')
    return output

# Место для функции show_message.


def accept_package(data):
    """Обработать пакет данных."""

    if not check_correct_data: # Если функция проверки пакета вернет False
        return 'Некорректный пакет'

    # Распакуйте полученные данные.
    pack_time =  # Преобразуйте строку с временем в объект типа time.

    if not check_correct_time: # Если функция проверки значения времени вернет False
        return 'Некорректное значение времени'

    day_steps =  # Запишите результат подсчёта пройденных шагов.
    dist =  # Запишите результат расчёта пройденной дистанции.
    spent_calories =  # Запишите результат расчёта сожжённых калорий.
    achievement =  # Запишите выбранное мотивирующее сообщение.
    # Вызовите функцию show_message().
    # Добавьте новый элемент в словарь storage_data.
    # Верните словарь storage_data.


# Данные для самопроверки. Не удаляйте их.
package_0 = ('2:00:01', 505)
package_1 = (None, 3211)
package_2 = ('9:36:02', 15000)
package_3 = ('9:36:02', 9000)
package_4 = ('8:01:02', 7600)

accept_package(package_0)
accept_package(package_1)
accept_package(package_2)
accept_package(package_3)
accept_package(package_4)
